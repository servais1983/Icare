# Dockerfile.backend
# Ce Dockerfile est responsable de la construction du service backend Rust (Icare).

# === Étape 1: Construire l'application ===
# Nous utilisons l'image officielle de Rust comme environnement de build.
# L'utilisation d'une version spécifique garantit la reproductibilité.
FROM rust:1.78 as builder

# Définir le répertoire de travail dans le conteneur.
WORKDIR /app

# Copier les fichiers de manifeste.
COPY Cargo.toml Cargo.lock ./

# Créer un faux src/main.rs pour ne construire que les dépendances.
# C'est une optimisation du cache. Si seul le code source change,
# nous n'avons pas besoin de reconstruire toutes les dépendances.
RUN mkdir src && echo "fn main() {}" > src/main.rs
RUN cargo build --release
RUN rm -rf src

# Maintenant, copier le code source réel et les répertoires des modules.
# La structure des fichiers est inhabituelle, avec des modules en dehors du répertoire 'src'.
COPY ./src ./src
COPY ./aegis ./aegis
COPY ./crypto ./crypto
COPY ./dashboard ./dashboard
COPY ./neural_net ./neural_net
COPY ./neurofirewall ./neurofirewall
COPY ./warpshield ./warpshield

# Construire l'application pour la production.
# 'touch' met à jour la date de modification pour s'assurer que Cargo recompile le binaire principal.
RUN touch src/main.rs && cargo build --release

# === Étape 2: Créer l'image finale et légère ===
# Nous utilisons une image Debian slim pour une taille réduite.
FROM debian:buster-slim

# Définir le répertoire de travail.
WORKDIR /app

# Copier le binaire compilé depuis l'étape de build.
# Le nom du binaire est 'icare_core' comme défini dans Cargo.toml.
COPY --from=builder /app/target/release/icare_core .

# Exposer le port sur lequel l'application écoute.
# Cela doit correspondre au port utilisé dans votre code Rust.
EXPOSE 8080

# Définir la commande pour lancer l'application.
CMD ["./icare_core"] 